% Regression tests for isotpscanner
~ python3_only

# More information at http://www.secdev.org/projects/UTscapy/


############
############
+ Configuration of CAN virtual sockets

= Load os
~ conf command needs_root linux

import os
import threading
import time
import subprocess

from scapy.all import load_contrib, load_layer

import scapy.modules.six as six

if six.PY2:
    conf.contribs['CANSocket'] = {'use-python-can': True}
else:
    conf.contribs['ISOTP'] = {'use-can-isotp-kernel-module': True}


= Load module
~ conf command needs_root linux
load_contrib("isotp")
load_contrib("cansocket")
load_layer("can")


= Setup vcan0, vcan1
~ conf command needs_root linux

bashCommand = "/bin/bash -c 'sudo modprobe vcan; sudo ip link add name vcan0 type vcan; sudo ip link set dev vcan0 up; sudo ip link add name vcan1 type vcan; sudo ip link set dev vcan1 up;'"

0 == os.system(bashCommand)


= init sockets
~ needs_root linux
CanSocket_recv = CANSocket("vcan1")


= Test wrong usage
~ needs_root linux
result = subprocess.run(['python', '-m', 'scapy.tools.automotive.isotpscanner'], capture_output=True)
output = result.stderr
print(output)
expected_output = b'usage: isotpscanner.py startID endID interface [-flags]\nISOTP Scanner: error: the following arguments are required: startID, endID, interface\n'
assert output == expected_output


= Test show help
~ needs_root linux
result = subprocess.run(['python', '-m', 'scapy.tools.automotive.isotpscanner', '--help'], capture_output=True)
output = result.stdout
expected_output = b'usage: isotpscanner.py startID endID interface [-flags]\n\nScan for active ISOTP-Addresses.\n\npositional arguments:\n  startID               Start scan at this ID (hex)\n  endID                 End scan at this ID (hex)\n  interface             CAN interface for the scan\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -e, --extended        Include extended ID\'s to scan.\n  -k KEEP_ALIVE, --keep_alive KEEP_ALIVE\n                        \'Keep alive\' - Send a periodic dummy-packet to\n                        specified interface.\n  -eo, --extended_only  Scan only with extended ID\'s.\n  -p, --piso            Print \'Copy&Paste\'-ready ISOTPSockets.\n'
print(output)
print(expected_output)
assert output == expected_output


= Test standard scan
~ needs_root linux

def isotpserver():
	isotpsock1 = ISOTPNativeSocket("vcan0", sid=0x700, did=0x600)
	isotpsock1.sniff(timeout=100, count=1)
	isotpsock1.close()

sniffer = threading.Thread(target=isotpserver)
sniffer.start()
time.sleep(0.1)
result = subprocess.run(['python', '-m', 'scapy.tools.automotive.isotpscanner', '0x600', '0x600', 'vcan0'], capture_output=True)
subprocess.call(['cansend', 'vcan0', '600#01aa'])
expected_output = b"Start scan (0x600 - 0x600)\nFiltering background noise...\nScan: \nFound 1 ISOTP-FlowControl Packet(s):\nSend to ID:\t\t0x600\nReceived ID:\t\t0x700\nMessage:\t\t"
output = result.stdout
print(output)
print(expected_output)
assert expected_output in output
1 == 1


= Test extended scan
~ needs_root linux

def isotpserver():
	s = ISOTPNativeSocket("vcan0", sid=0x700, did=0x601, extended_addr=0xaa, extended_rx_addr=0xbb)
	s.sniff(timeout=100, count=1)
	return

sniffer = threading.Thread(target=isotpserver)
sniffer.start()
time.sleep(0.1)
result = subprocess.run(['python', '-m', 'scapy.tools.automotive.isotpscanner', '0x601', '0x601', 'vcan0', '-e'], capture_output=True)
subprocess.call(['cansend', 'vcan0', '601#BB01aa'])
expected_output = b"Start scan (0x601 - 0x601)\nFiltering background noise...\nStart scan with extended ID's (0x601 - 0x601)\nFiltering background noise...\nScan: No packets found.\nExtended scan: \nFound 1 ISOTP-FlowControl Packet(s):\nSend to ID:\t\t\t\t0x64\nSend to extended ID:\t0xbb\nReceived ID:\t\t\t0x700\nReceived extended ID:\t0xaa\nMessage:\t\t\t\t"
output = result.stdout
print(output)
assert expected_output in output
1 == 1


= Test extended only scan
~ needs_root linux

def isotpserver():
	s = ISOTPNativeSocket("vcan0", sid=0x700, did=0x601, extended_addr=0xaa, extended_rx_addr=0xbb)
	s.sniff(timeout=100, count=1)
	return

sniffer = threading.Thread(target=isotpserver)
sniffer.start()
time.sleep(0.1)
result = subprocess.run(['python', '-m', 'scapy.tools.automotive.isotpscanner', '0x601', '0x601', 'vcan0', '-eo'], capture_output=True)
subprocess.call(['cansend', 'vcan0', '601#BB01aa'])
expected_output = b"Start scan with extended ID's (0x601 - 0x601)\nFiltering background noise...\nExtended scan: \nFound 1 ISOTP-FlowControl Packet(s):\nSend to ID:\t\t\t\t0x64\nSend to extended ID:\t0xbb\nReceived ID:\t\t\t0x700\nReceived extended ID:\t0xaa\nMessage:\t\t\t\t"
output = result.stdout
print(output)
assert expected_output in output
1 == 1


= Test scan with piso flag
~ needs_root linux

def isotpserver():
	s = ISOTPNativeSocket("vcan0", sid=0x700, did=0x601, extended_addr=0xaa, extended_rx_addr=0xbb)
	s.sniff(timeout=100, count=1)
	return

sniffer = threading.Thread(target=isotpserver)
sniffer.start()
time.sleep(0.1)
result = subprocess.run(['python', '-m', 'scapy.tools.automotive.isotpscanner', '0x601', '0x601', 'vcan0', '-eo', '-p'], capture_output=True)
subprocess.call(['cansend', 'vcan0', '601#BB01aa'])
expected_output = b"Start scan with extended ID's (0x601 - 0x601)\nFiltering background noise...\nExtended scan: ISOTPSocket(can0, sid=0x64, did=0x700, padding=False, extended_addr=0xbb, extended_rx_addr=0xaa]\n"
output = result.stdout
print(output)
assert expected_output == output
1 == 1


= Test keep alive
~ needs_root linux
count = 0

def isotpserver():
	isotpsock1 = ISOTPNativeSocket("vcan0", sid=0x700, did=0x600)
	isotpsock1.sniff(timeout=100, count=1)

def cansocket():
    global count
    packets = CanSocket_recv.sniff(count=5)
    count = len(packets)

sniffer = threading.Thread(target=isotpserver)
sniffer.start()
thread = threading.Thread(target=cansocket)
thread.start()
time.sleep(0.1)
result = subprocess.run(['python', '-m', 'scapy.tools.automotive.isotpscanner', '0x600', '0x600', 'vcan0', '-k', 'vcan1'], capture_output=True)
subprocess.call(['cansend', 'vcan0', '600#01aa'])
expected_output = b"Start scan (0x600 - 0x600)\nFiltering background noise...\nScan: \nFound 1 ISOTP-FlowControl Packet(s):\nSend to ID:\t\t0x600\nReceived ID:\t\t0x700\nMessage:\t\t"
output = result.stdout
print(output)
print(expected_output)
assert expected_output in output
print(str(count))
assert count == 5
1 == 1